{
  "info": {
    "name": "M3.5 Analytics & Monitoring API Tests",
    "description": "Comprehensive testing suite for DealRadarUS analytics and monitoring endpoints",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "1.0.0"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3001",
      "type": "string",
      "description": "Base URL for the DealRadarUS API"
    },
    {
      "key": "frontendUrl", 
      "value": "http://localhost:3000",
      "type": "string",
      "description": "Frontend URL for CORS testing"
    }
  ],
  "item": [
    {
      "name": "Health & Readiness Checks",
      "item": [
        {
          "name": "Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status', 'healthy');",
                  "    pm.expect(jsonData).to.have.property('timestamp');",
                  "    pm.expect(jsonData).to.have.property('version');",
                  "    pm.expect(jsonData).to.have.property('environment');",
                  "    pm.expect(jsonData).to.have.property('uptime');",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "pm.test('Memory usage is included', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('memory');",
                  "    pm.expect(jsonData.memory).to.have.property('rss');",
                  "    pm.expect(jsonData.memory).to.have.property('heapUsed');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            }
          }
        },
        {
          "name": "Readiness Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Service is ready', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status', 'ready');",
                  "    pm.expect(jsonData).to.have.property('checks');",
                  "});",
                  "",
                  "pm.test('Database check passes', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.checks.database.status).to.equal('connected');",
                  "});",
                  "",
                  "pm.test('Email service check passes', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.checks.email.status).to.equal('connected');",
                  "});",
                  "",
                  "pm.test('Migrations are applied', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.checks.migrations.status).to.equal('applied');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/ready",
              "host": ["{{baseUrl}}"],
              "path": ["ready"]
            }
          }
        }
      ]
    },
    {
      "name": "Metrics Collection",
      "item": [
        {
          "name": "Prometheus Metrics",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Content type is Prometheus format', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');",
                  "});",
                  "",
                  "pm.test('Contains HTTP request metrics', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include('dealradarus_http_requests_total');",
                  "    pm.expect(responseText).to.include('dealradarus_http_request_duration_seconds');",
                  "});",
                  "",
                  "pm.test('Contains memory metrics', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include('dealradarus_memory_usage_bytes');",
                  "});",
                  "",
                  "pm.test('Contains business metrics', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include('dealradarus_reviews_total');",
                  "    pm.expect(responseText).to.include('dealradarus_comments_total');",
                  "});",
                  "",
                  "pm.test('Metrics have proper format', function () {",
                  "    const responseText = pm.response.text();",
                  "    // Check for HELP comments",
                  "    pm.expect(responseText).to.include('# HELP');",
                  "    // Check for TYPE comments", 
                  "    pm.expect(responseText).to.include('# TYPE');",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "text/plain"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/metrics",
              "host": ["{{baseUrl}}"],
              "path": ["metrics"]
            }
          }
        },
        {
          "name": "Metrics - Rate Limiting Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Multiple requests succeed', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Rate limiting metrics updated', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include('dealradarus_http_requests_total');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/metrics",
              "host": ["{{baseUrl}}"],
              "path": ["metrics"]
            }
          }
        }
      ]
    },
    {
      "name": "Error Handling & Logging",
      "item": [
        {
          "name": "404 Not Found",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error response format is correct', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', false);",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('timestamp');",
                  "});",
                  "",
                  "pm.test('Contains correlation ID', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('correlationId');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Request-ID",
                "value": "test-404-{{$randomUUID}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/nonexistent-endpoint",
              "host": ["{{baseUrl}}"],
              "path": ["nonexistent-endpoint"]
            }
          }
        },
        {
          "name": "Invalid Method",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 404 or 405', function () {",
                  "    pm.expect([404, 405]).to.include(pm.response.code);",
                  "});",
                  "",
                  "pm.test('Error response is JSON', function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            }
          }
        }
      ]
    },
    {
      "name": "CORS & Security",
      "item": [
        {
          "name": "CORS Preflight - Health",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('CORS preflight successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('CORS headers present', function () {",
                  "    pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.exist;",
                  "    pm.expect(pm.response.headers.get('Access-Control-Allow-Methods')).to.exist;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "OPTIONS",
            "header": [
              {
                "key": "Origin",
                "value": "{{frontendUrl}}"
              },
              {
                "key": "Access-Control-Request-Method",
                "value": "GET"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            }
          }
        },
        {
          "name": "Security Headers Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Security headers present', function () {",
                  "    pm.expect(pm.response.headers.get('X-Frame-Options')).to.exist;",
                  "    pm.expect(pm.response.headers.get('X-Content-Type-Options')).to.exist;",
                  "});",
                  "",
                  "pm.test('Content Security Policy header present', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Security-Policy')).to.exist;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            }
          }
        }
      ]
    },
    {
      "name": "Performance Tests",
      "item": [
        {
          "name": "Concurrent Health Checks",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Response time under load', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test('Status remains healthy under load', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.equal('healthy');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            }
          }
        },
        {
          "name": "Metrics Performance",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Metrics endpoint responds in reasonable time', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});",
                  "",
                  "pm.test('Metrics data is not empty', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText.length).to.be.greaterThan(100);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/metrics",
              "host": ["{{baseUrl}}"],
              "path": ["metrics"]
            }
          }
        }
      ]
    },
    {
      "name": "Integration Tests",
      "item": [
        {
          "name": "Health → Ready → Metrics Flow",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// This test checks the complete monitoring flow",
                  "",
                  "pm.test('All monitoring endpoints accessible', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Store metrics data for next request",
                  "pm.globals.set('metricsData', pm.response.text());"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/metrics",
              "host": ["{{baseUrl}}"],
              "path": ["metrics"]
            }
          }
        },
        {
          "name": "Validate Metrics Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Metrics contain HTTP request counters', function () {",
                  "    const metricsData = pm.globals.get('metricsData');",
                  "    pm.expect(metricsData).to.include('dealradarus_http_requests_total');",
                  "});",
                  "",
                  "pm.test('Metrics show recent activity', function () {",
                  "    const metricsData = pm.globals.get('metricsData');",
                  "    // Should contain metrics from our previous requests",
                  "    pm.expect(metricsData).to.include('method=\"GET\"');",
                  "    pm.expect(metricsData).to.include('route=\"/health\"');",
                  "});",
                  "",
                  "// Cleanup",
                  "pm.globals.unset('metricsData');"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            }
          }
        }
      ]
    },
    {
      "name": "Environment Validation",
      "item": [
        {
          "name": "Development Environment Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Environment is development', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.environment).to.equal('development');",
                  "});",
                  "",
                  "pm.test('Debug information available in dev', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('memory');",
                  "    pm.expect(jsonData).to.have.property('cpu');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            }
          }
        },
        {
          "name": "Monitoring Features Enabled",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Metrics endpoint available', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Monitoring is enabled', function () {",
                  "    // If metrics endpoint is available, monitoring is enabled",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include('# HELP');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/metrics",
              "host": ["{{baseUrl}}"],
              "path": ["metrics"]
            }
          }
        }
      ]
    }
  ]
}