"use strict";exports.id=706,exports.ids=[706],exports.modules={6706:(a,b,c)=>{c.r(b);let{Pool:d}=require("pg"),e=require("./database-fallback");require("dotenv").config({path:".env.dealradarus.local"});let f=null;class g{constructor(){if(this.useFallback=!1,this.connectionString=process.env.DATABASE_URL_POOLER||process.env.DATABASE_URL,!this.connectionString){this.useFallback=!0;return}this.pool=new d({connectionString:this.connectionString,ssl:!0,max:5,idleTimeoutMillis:6e4,connectionTimeoutMillis:1e4,keepAlive:!0,keepAliveInitialDelayMillis:1e4}),this.testConnection().catch(()=>{this.useFallback=!0})}async getClient(){return this.useFallback?await e.getClient():await this.pool.connect()}async query(a,b){if(this.useFallback)return await e.query(a,b);try{return await this.pool.query(a,b)}catch(c){return this.useFallback=!0,await e.query(a,b)}}async testConnection(){if(this.useFallback)return await e.testConnection();try{return await this.pool.query("SELECT NOW()")}catch(a){return this.useFallback=!0,await e.testConnection()}}async close(){if(this.useFallback)return await e.close();await this.pool.end()}async transaction(a){let b=await this.getClient();try{await b.query("BEGIN");let c=await a(b);return await b.query("COMMIT"),c}catch(a){throw await b.query("ROLLBACK"),a}finally{await b.end()}}}f||(f=new g),module.exports=f}};