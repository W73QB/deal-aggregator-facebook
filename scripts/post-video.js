// GENERATED BY GEMINI
const path = require('path');
const fs = require('fs');
const { ConfigLoader } = require('./deal-aggregator/core/utils/config');
const { FacebookAPI } = require('./deal-aggregator/core/utils/facebook-api');

async function createSampleVideo() {
  const videoPath = path.join(__dirname, 'media/sample.mp4');
  
  if (fs.existsSync(videoPath)) {
    console.log('üìπ Using existing media/sample.mp4');
    return videoPath;
  }

  console.log('üìπ Creating sample video with ffmpeg...');
  
  try {
    const { execSync } = require('child_process');
    
    // Create a simple 3-second colored video with text
    const ffmpegCommand = `ffmpeg -f lavfi -i "color=blue:size=640x480:duration=3" -vf "drawtext=fontsize=30:fontcolor=white:x=(w-text_w)/2:y=(h-text_h)/2:text='Sample Video Test'" -c:v libx264 -t 3 -pix_fmt yuv420p "${videoPath}"`;
    
    execSync(ffmpegCommand, { stdio: 'pipe' });
    console.log('‚úÖ Sample video created successfully');
    return videoPath;
    
  } catch (error) {
    console.log('‚ö†Ô∏è  ffmpeg not available, creating placeholder video file');
    
    // Create a minimal MP4 file (this won't actually work for posting, but shows the structure)
    const placeholderContent = 'PLACEHOLDER_MP4_FILE_FOR_TESTING';
    fs.writeFileSync(videoPath, placeholderContent);
    console.log('‚ö†Ô∏è  Created placeholder file - real video posting requires actual MP4 file');
    return null; // Return null to indicate this won't work for actual posting
  }
}

async function postVideoTest() {
  console.log('üé• FACEBOOK VIDEO POSTING TEST');
  console.log('================================\n');

  try {
    // Load environment configuration
    const env = ConfigLoader.loadEnvironment();
    
    // Validate Facebook configuration
    const fbConfigValid = ConfigLoader.validateFacebookConfig(env);
    
    if (!fbConfigValid) {
      console.log('‚ùå INVALID FACEBOOK CONFIGURATION\n');
      console.log('üìã REQUIRED SETUP STEPS:');
      console.log('1. Set valid FB_PAGE_ID in config/.env.local.json');
      console.log('2. Set valid FB_PAGE_ACCESS_TOKEN in config/.env.local.json');
      console.log('3. Ensure Page Access Token has permissions:');
      console.log('   - pages_manage_posts');
      console.log('   - pages_read_engagement'); 
      console.log('   - pages_show_list');
      console.log('   - pages_read_user_content');
      console.log('4. App must be in Live Mode (not Development Mode)');
      console.log('5. Token should be a Page Access Token (not User Access Token)\n');
      
      console.log('üí° QUICK TEST WITH PLACEHOLDER:');
      console.log('   Replace placeholder values in config/.env.local.json and run again');
      return;
    }

    console.log(`üìä Page ID: ${env.FB_PAGE_ID}`);
    console.log(`üîë Token: [${env.FB_PAGE_ACCESS_TOKEN.length} chars]`);

    // Create or use existing sample video
    const videoPath = await createSampleVideo();
    
    if (!videoPath) {
      console.log('\n‚ö†Ô∏è  SKIPPING VIDEO POST TEST');
      console.log('Cannot create valid MP4 file without ffmpeg.');
      console.log('To test video posting:');
      console.log('1. Install ffmpeg: brew install ffmpeg (macOS) or apt install ffmpeg (Linux)');
      console.log('2. Or manually add a valid MP4 file to media/sample.mp4');
      console.log('3. Run this script again');
      return;
    }

    console.log(`üé• Video: ${videoPath}\n`);

    // Initialize API
    const facebookAPI = new FacebookAPI(env.FB_PAGE_ID, env.FB_PAGE_ACCESS_TOKEN);

    // Test credentials first
    console.log('STEP 1: Testing API Access...');
    const accessTest = await facebookAPI.testAccess();
    
    if (!accessTest.overall) {
      console.log('\n‚ùå API ACCESS FAILED');
      if (accessTest.error) {
        console.log(`Error: ${JSON.stringify(accessTest.error, null, 2)}`);
      }
      return;
    }

    // Test video posting
    console.log('\nSTEP 2: Posting Sample Video...');
    
    const description = `üé• Facebook Video Test - ${new Date().toISOString()}\n\nThis is a test video posted via Graph API to verify media posting functionality.\n\n‚úÖ Video processing successful if you see this on your Facebook page.\n\nNote: Videos may take a few minutes to process after upload.`;

    const videoResult = await facebookAPI.postVideo({ videoPath, description });

    if (videoResult.success) {
      console.log('\n‚úÖ VIDEO UPLOAD STARTED SUCCESSFULLY!');
      console.log(`üìù Video ID: ${videoResult.videoId}`);
      
      // Generate preview URLs
      const videoUrl = `https://www.facebook.com/${env.FB_PAGE_ID}/videos/${videoResult.videoId}`;
      const pageUrl = `https://www.facebook.com/${env.FB_PAGE_ID}`;
      
      console.log(`üîó Video URL: ${videoUrl}`);
      console.log(`üè† Page URL: ${pageUrl}`);
      console.log('\n‚è≥ PROCESSING NOTE:');
      console.log('Videos are processed asynchronously by Facebook.');
      console.log('It may take 1-5 minutes for the video to appear on your page.');
      console.log('Check the URLs above in a few minutes to confirm processing.');
      
    } else {
      console.log('\n‚ùå VIDEO POSTING FAILED');
      console.log(`Reason: ${videoResult.message}`);
      
      if (videoResult.error) {
        console.log('\nüìã API Error Details:');
        console.log(JSON.stringify(videoResult.error, null, 2));
        
        // Specific error guidance
        if (videoResult.error.error?.code === 10) {
          console.log('\nüö® PERMISSION ERROR - Required Actions:');
          console.log('- Check that your app has pages_manage_posts permission');
          console.log('- Ensure app is in Live Mode (not Development Mode)');
          console.log('- Verify token is a Page Access Token, not User Access Token');
        }
        
        if (videoResult.error.error?.code === 190) {
          console.log('\nüö® AUTHENTICATION ERROR - Required Actions:');
          console.log('- Token may be expired or invalid');
          console.log('- Generate new Page Access Token');
          console.log('- Ensure token has not been regenerated in Facebook Developer Console');
        }
        
        if (videoResult.error.error?.code === 1363030) {
          console.log('\nüö® VIDEO FORMAT ERROR - Required Actions:');
          console.log('- Ensure video file is valid MP4 format');
          console.log('- Check video codec compatibility (H.264 recommended)');
          console.log('- Verify file size is under Facebook limits');
        }
      }
    }
    
  } catch (error) {
    console.log('\n‚ùå SCRIPT ERROR');
    console.log(`Error: ${error.message}`);
    console.log('\nüí° Make sure config/.env.local.json exists and is properly formatted.');
  }
}

// Execute
postVideoTest().catch(console.error);