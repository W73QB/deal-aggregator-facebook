#!/usr/bin/env node
/**
 * 🌐 DealRadarUS - URL Structure Cleanup
 * Create clean SEO-friendly URLs and set up 301 redirects
 */

const fs = require('fs');
const path = require('path');

console.log('🌐 DEALRADARUS - URL Structure & SEO Optimization\n');
console.log('================================================');

// URL structure mapping (old → new)
const urlMappings = {
    // Main pages
    '/index.html': '/',
    '/home.html': '/',
    '/deals.html': '/deals/',
    '/blog.html': '/blog/',
    
    // Pages directory
    '/pages/index.html': '/',
    '/pages/deals.html': '/deals/', 
    '/pages/blog.html': '/blog/',
    '/pages/contact.html': '/contact/',
    '/pages/affiliate-disclosure.html': '/affiliate-disclosure/',
    '/pages/privacy-policy.html': '/privacy-policy/',
    '/pages/terms-of-service.html': '/terms-of-service/',
    
    // Category pages (if they exist)
    '/deals.html?category=refurbished': '/deals/refurbished/',
    '/deals.html?category=smart-home': '/deals/smart-home/', 
    '/deals.html?category=open-box': '/deals/open-box/',
    '/deals.html?category=trending': '/deals/trending/'
};

// Apache .htaccess rules for redirects
function generateHtaccess() {
    const htaccessContent = `# DealRadarUS - URL Structure & SEO Optimization
# Generated by URL structure cleanup script

RewriteEngine On

# Security headers
Header always set X-Content-Type-Options nosniff
Header always set X-Frame-Options DENY
Header always set X-XSS-Protection "1; mode=block"
Header always set Referrer-Policy "strict-origin-when-cross-origin"

# HTTPS redirect
RewriteCond %{HTTPS} off
RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]

# Remove trailing .html extension
RewriteCond %{REQUEST_FILENAME} !-d
RewriteCond %{REQUEST_FILENAME} !-f
RewriteRule ^([^.]+)$ $1.html [NC,L]

# Clean URL redirects (301 redirects for SEO)
${Object.entries(urlMappings)
    .filter(([old, new_url]) => old !== new_url)
    .map(([old, new_url]) => {
        // Convert to Apache RewriteRule format
        const oldPattern = old.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
        if (old.includes('?')) {
            const [basePath, queryString] = old.split('?');
            return `RewriteCond %{QUERY_STRING} ^${queryString}$
RewriteRule ^${basePath.substring(1)}$ ${new_url} [R=301,L]`;
        } else {
            return `RewriteRule ^${oldPattern.substring(1)}$ ${new_url} [R=301,L]`;
        }
    })
    .join('\n')}

# Remove www redirect (optional - enforce non-www)
RewriteCond %{HTTP_HOST} ^www\\.(.+)$ [NC]
RewriteRule ^(.*)$ https://%1/$1 [R=301,L]

# Compress files for better performance
<IfModule mod_deflate.c>
    AddOutputFilterByType DEFLATE text/plain
    AddOutputFilterByType DEFLATE text/html
    AddOutputFilterByType DEFLATE text/xml
    AddOutputFilterByType DEFLATE text/css
    AddOutputFilterByType DEFLATE application/xml
    AddOutputFilterByType DEFLATE application/xhtml+xml
    AddOutputFilterByType DEFLATE application/rss+xml
    AddOutputFilterByType DEFLATE application/javascript
    AddOutputFilterByType DEFLATE application/x-javascript
</IfModule>

# Cache static files
<IfModule mod_expires.c>
    ExpiresActive On
    ExpiresByType image/jpg "access plus 1 month"
    ExpiresByType image/jpeg "access plus 1 month"
    ExpiresByType image/gif "access plus 1 month"
    ExpiresByType image/png "access plus 1 month"
    ExpiresByType text/css "access plus 1 month"
    ExpiresByType application/pdf "access plus 1 month"
    ExpiresByType application/javascript "access plus 1 month"
    ExpiresByType application/x-javascript "access plus 1 month"
    ExpiresByType application/x-shockwave-flash "access plus 1 month"
    ExpiresByType image/x-icon "access plus 1 year"
    ExpiresDefault "access plus 2 days"
</IfModule>

# Error pages
ErrorDocument 404 /404.html
ErrorDocument 500 /500.html`;

    fs.writeFileSync('.htaccess', htaccessContent);
    console.log('✅ Generated .htaccess with URL redirects and optimization rules');
}

// Netlify _redirects file (for Netlify hosting)
function generateNetlifyRedirects() {
    const redirectsContent = `# DealRadarUS - Netlify Redirects
# Generated by URL structure cleanup script

# Clean URL redirects (301 redirects for SEO)
${Object.entries(urlMappings)
    .filter(([old, new_url]) => old !== new_url)
    .map(([old, new_url]) => `${old}    ${new_url}    301`)
    .join('\n')}

# SPA fallback
/*    /index.html   200`;

    fs.writeFileSync('_redirects', redirectsContent);
    console.log('✅ Generated _redirects for Netlify hosting');
}

// Update internal links in HTML files
function updateInternalLinks() {
    const htmlFiles = [
        'index.html',
        'home.html',
        'blog.html', 
        'deals.html',
        'pages/index.html',
        'pages/blog.html',
        'pages/deals.html',
        'pages/contact.html'
    ];
    
    let totalUpdates = 0;

    htmlFiles.forEach(filePath => {
        if (!fs.existsSync(filePath)) {
            console.log(`⏭️  Skipping ${filePath} (not found)`);
            return;
        }

        console.log(`\n🔧 Updating internal links: ${filePath}`);
        let content = fs.readFileSync(filePath, 'utf8');
        let fileUpdates = 0;

        // Update href attributes
        Object.entries(urlMappings).forEach(([oldUrl, newUrl]) => {
            const oldPattern = new RegExp(`href=["']${oldUrl.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}["']`, 'g');
            const matches = content.match(oldPattern);
            
            if (matches) {
                content = content.replace(oldPattern, `href="${newUrl}"`);
                fileUpdates += matches.length;
                console.log(`   ✅ Updated ${matches.length} link(s): ${oldUrl} → ${newUrl}`);
            }
        });

        // Update relative links to absolute clean URLs
        const relativeLinkPatterns = [
            { from: 'href="deals.html"', to: 'href="/deals/"' },
            { from: 'href="blog.html"', to: 'href="/blog/"' },
            { from: 'href="index.html"', to: 'href="/"' },
            { from: 'href="contact.html"', to: 'href="/contact/"' }
        ];

        relativeLinkPatterns.forEach(({ from, to }) => {
            const matches = content.match(new RegExp(from, 'g'));
            if (matches) {
                content = content.replace(new RegExp(from, 'g'), to);
                fileUpdates += matches.length;
                console.log(`   ✅ Cleaned ${matches.length} relative link(s): ${from} → ${to}`);
            }
        });

        if (fileUpdates > 0) {
            fs.writeFileSync(filePath, content);
            console.log(`   💾 Saved ${filePath} with ${fileUpdates} link updates`);
            totalUpdates += fileUpdates;
        } else {
            console.log(`   ℹ️  No internal links to update`);
        }
    });

    return totalUpdates;
}

// Create canonical URL configuration
function createCanonicalConfig() {
    const canonicalUrls = {
        '/index.html': 'https://dealradarus.com/',
        '/home.html': 'https://dealradarus.com/', 
        '/deals.html': 'https://dealradarus.com/deals/',
        '/blog.html': 'https://dealradarus.com/blog/',
        '/pages/contact.html': 'https://dealradarus.com/contact/',
        '/pages/affiliate-disclosure.html': 'https://dealradarus.com/affiliate-disclosure/'
    };

    const configContent = JSON.stringify({
        canonicalUrls,
        baseUrl: 'https://dealradarus.com',
        cleanUrls: true,
        redirectMappings: urlMappings,
        seoOptimized: true
    }, null, 2);

    fs.writeFileSync('url-config.json', configContent);
    console.log('✅ Created URL configuration file: url-config.json');
}

// Main execution
console.log('🔧 Setting up SEO-friendly URL structure...\n');

// Generate redirect files
generateHtaccess();
generateNetlifyRedirects();

// Update internal links
const linkUpdates = updateInternalLinks();

// Create configuration
createCanonicalConfig();

// Generate summary report
console.log('\n================================================');
console.log('🌐 URL STRUCTURE OPTIMIZATION - SUMMARY');
console.log('================================================\n');

console.log(`🔗 URL mappings configured: ${Object.keys(urlMappings).length}`);
console.log(`📝 Internal links updated: ${linkUpdates}`);
console.log(`📄 Files generated:`);
console.log(`   • .htaccess (Apache redirects + optimization)`);
console.log(`   • _redirects (Netlify redirects)`);
console.log(`   • url-config.json (Configuration reference)\n`);

console.log('🎯 NEW URL STRUCTURE:');
Object.entries(urlMappings)
    .filter(([old, new_url]) => old !== new_url)
    .forEach(([old, new_url]) => {
        console.log(`   ${old} → ${new_url}`);
    });

console.log('\n📊 SEO BENEFITS:');
console.log('   ✅ Clean URLs (no .html extension)');
console.log('   ✅ 301 redirects preserve SEO value');
console.log('   ✅ Canonical URLs prevent duplicate content');
console.log('   ✅ Internal linking structure optimized');
console.log('   ✅ Performance optimizations included');

// Save detailed report
const reportData = {
    timestamp: new Date().toISOString(),
    urlMappings,
    internalLinksUpdated: linkUpdates,
    filesGenerated: ['.htaccess', '_redirects', 'url-config.json'],
    seoBenefits: [
        'Clean URLs without .html extension',
        '301 redirects preserve SEO value', 
        'Canonical URLs prevent duplicate content',
        'Optimized internal linking structure',
        'Performance optimizations included'
    ]
};

fs.writeFileSync('url-structure-report.json', JSON.stringify(reportData, null, 2));

console.log('\n💾 Report saved to: url-structure-report.json');

console.log('\n🚀 NEXT STEPS:');
console.log('1. Test redirects on staging/local server');  
console.log('2. Deploy .htaccess or _redirects to production');
console.log('3. Update Google Search Console with new URLs');
console.log('4. Monitor 404 errors and adjust redirects if needed');

console.log('\n================================================');