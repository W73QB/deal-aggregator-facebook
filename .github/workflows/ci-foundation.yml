name: Foundation CI Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
    paths:
      - "**/*.html"
      - "**/*.js"
      - "**/*.json"
      - "**/*.md"
      - ".htaccess"
      - "_redirects"
      - "sitemap.xml"
      - "robots.txt"

jobs:
  forms:
    name: Form Validation Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Make scripts executable
        run: chmod +x scripts/validate-forms.sh
        
      - name: Validate forms
        run: ./scripts/validate-forms.sh
        
      - name: Form validation summary
        if: always()
        run: |
          echo "## üìã Form Validation Results" >> $GITHUB_STEP_SUMMARY
          if [ $? -eq 0 ]; then
            echo "‚úÖ All forms pass validation checks" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Form validation issues found" >> $GITHUB_STEP_SUMMARY
          fi

  tos:
    name: Terms of Service Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Make scripts executable
        run: chmod +x scripts/check-tos-exists.sh
        
      - name: Check Terms of Service
        run: ./scripts/check-tos-exists.sh
        
      - name: ToS check summary
        if: always()
        run: |
          echo "## üìã Terms of Service Results" >> $GITHUB_STEP_SUMMARY
          if [ $? -eq 0 ]; then
            echo "‚úÖ Terms of Service properly configured" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Terms of Service issues found" >> $GITHUB_STEP_SUMMARY
          fi

  urls:
    name: Clean URLs Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Make scripts executable
        run: chmod +x scripts/check-clean-urls.sh
        
      - name: Check clean URLs
        run: ./scripts/check-clean-urls.sh
        
      - name: Clean URLs summary
        if: always()
        run: |
          echo "## üåê Clean URLs Results" >> $GITHUB_STEP_SUMMARY
          if [ $? -eq 0 ]; then
            echo "‚úÖ Clean URL structure properly configured" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Clean URL issues found" >> $GITHUB_STEP_SUMMARY
          fi

  email-guard:
    name: Email Consistency Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install ripgrep
        run: |
          curl -LO https://github.com/BurntSushi/ripgrep/releases/download/13.0.0/ripgrep_13.0.0_amd64.deb
          sudo dpkg -i ripgrep_13.0.0_amd64.deb
        
      - name: Block old emails
        run: |
          set -e
          echo "üîç Checking for old email patterns..."
          if rg -n 'support@|contact@|info@|admin@|hello@' \
            --glob '!{.git,node_modules,dist,build,coverage,handoff}/**' \
            .; then
            echo "‚ùå Found old emails"
            exit 1
          else
            echo "‚úÖ No old email patterns found"
          fi
          
      - name: Require deals@ email
        run: |
          echo "üìß Checking for required deals@ email..."
          if rg -n 'mailto:deals@dealradarus\.com' --type html . >/dev/null; then
            echo "‚úÖ Found mailto:deals@ links"
          else
            echo "‚ùå No mailto:deals@ found"
            exit 1
          fi
          
      - name: Email check summary
        if: always()
        run: |
          echo "## üìß Email Consistency Results" >> $GITHUB_STEP_SUMMARY
          if [ $? -eq 0 ]; then
            echo "‚úÖ Email consistency maintained" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Email consistency issues found" >> $GITHUB_STEP_SUMMARY
          fi

  seo-validation:
    name: SEO Structure Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Validate sitemap.xml
        run: |
          echo "üó∫Ô∏è  Validating sitemap.xml structure..."
          
          if [ ! -f "sitemap.xml" ]; then
            echo "‚ùå sitemap.xml not found"
            exit 1
          fi
          
          # Check XML syntax
          if ! xmllint --noout sitemap.xml 2>/dev/null; then
            echo "‚ùå sitemap.xml has invalid XML syntax"
            exit 1
          fi
          
          # Count URLs
          URL_COUNT=$(grep -c "<loc>" sitemap.xml)
          echo "‚úÖ Found $URL_COUNT URLs in sitemap"
          
          if [ $URL_COUNT -lt 5 ]; then
            echo "‚ö†Ô∏è  Sitemap has fewer than 5 URLs"
          fi
          
      - name: Validate robots.txt
        run: |
          echo "ü§ñ Validating robots.txt..."
          
          if [ ! -f "robots.txt" ]; then
            echo "‚ùå robots.txt not found"
            exit 1
          fi
          
          # Check required directives
          if ! grep -q "User-agent:" robots.txt; then
            echo "‚ùå robots.txt missing User-agent directive"
            exit 1
          fi
          
          if ! grep -q "Sitemap:" robots.txt; then
            echo "‚ùå robots.txt missing Sitemap directive"
            exit 1
          fi
          
          echo "‚úÖ robots.txt structure valid"
          
      - name: Check meta tags
        run: |
          echo "üè∑Ô∏è  Checking essential meta tags..."
          
          HTML_FILES=("index.html" "pages/contact.html" "pages/terms-of-service.html")
          ISSUES=0
          
          for file in "${HTML_FILES[@]}"; do
            if [ -f "$file" ]; then
              echo "üìÑ Checking: $file"
              
              if ! grep -q "<title>" "$file"; then
                echo "‚ùå $file missing title tag"
                ISSUES=$((ISSUES + 1))
              fi
              
              if ! grep -q 'name="description"' "$file"; then
                echo "‚ùå $file missing meta description"
                ISSUES=$((ISSUES + 1))
              fi
              
              if ! grep -q 'name="viewport"' "$file"; then
                echo "‚ùå $file missing viewport meta"
                ISSUES=$((ISSUES + 1))
              fi
            fi
          done
          
          if [ $ISSUES -eq 0 ]; then
            echo "‚úÖ All meta tags present"
          else
            echo "‚ùå Found $ISSUES meta tag issues"
            exit 1
          fi
          
      - name: SEO validation summary
        if: always()
        run: |
          echo "## üîç SEO Structure Results" >> $GITHUB_STEP_SUMMARY
          if [ $? -eq 0 ]; then
            echo "‚úÖ SEO structure validation passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå SEO structure issues found" >> $GITHUB_STEP_SUMMARY
          fi

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [forms, tos, urls, email-guard, seo-validation]
    if: always()
    
    steps:
      - name: Generate overall summary
        run: |
          echo "# üéØ Foundation CI Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          
          # Forms check
          if [ "${{ needs.forms.result }}" == "success" ]; then
            echo "| üìã Form Validation | ‚úÖ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| üìã Form Validation | ‚ùå Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # ToS check
          if [ "${{ needs.tos.result }}" == "success" ]; then
            echo "| üìã Terms of Service | ‚úÖ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| üìã Terms of Service | ‚ùå Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # URLs check
          if [ "${{ needs.urls.result }}" == "success" ]; then
            echo "| üåê Clean URLs | ‚úÖ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| üåê Clean URLs | ‚ùå Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Email check
          if [ "${{ needs.email-guard.result }}" == "success" ]; then
            echo "| üìß Email Consistency | ‚úÖ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| üìß Email Consistency | ‚ùå Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # SEO check
          if [ "${{ needs.seo-validation.result }}" == "success" ]; then
            echo "| üîç SEO Structure | ‚úÖ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| üîç SEO Structure | ‚ùå Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next Steps:**" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ All checks passed: Ready for production deployment" >> $GITHUB_STEP_SUMMARY
          echo "- ‚ùå Issues found: Review failed checks and fix before merging" >> $GITHUB_STEP_SUMMARY