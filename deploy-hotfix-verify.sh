#!/usr/bin/env bash
set -euo pipefail

# ===== CONFIG (s·ª≠a n·∫øu kh√°c) =====
REPO_DIR="/Users/admin/projects/deal-aggregator-facebook"
REMOTE="origin"
BASE="main"
BR="hotfix/remove-cicd-debugline"
SITE_ORIGIN="https://dealradarus.com"

# Tu·ª≥ ch·ªçn (Cloudflare): export tr∆∞·ªõc khi ch·∫°y
# export CF_API_TOKEN="***"
# export CF_ZONE_ID="***"

cd "$REPO_DIR"

say(){ printf "\n\033[1;36m%s\033[0m\n" "$*"; }
warn(){ printf "\n\033[1;33m%s\033[0m\n" "$*"; }
die(){ printf "\n\033[1;31m%s\033[0m\n" "$*"; exit 1; }
have(){ command -v "$1" >/dev/null 2>&1; }

say "üîÑ Fetch & sync"
git fetch "$REMOTE" --prune
git checkout "$BR" || die "Kh√¥ng th·∫•y nh√°nh $BR"
git rebase "$REMOTE/$BASE" || { warn "Rebase l·ªói ‚Üí d√πng merge"; git merge --no-edit "$REMOTE/$BASE" || true; }

# Sanity: repo local kh√¥ng c√≤n chu·ªói l·ªói
if grep -R "CI/CD Test" --include="*.html" . >/dev/null 2>&1; then
  die "‚ùå Local v·∫´n c√≤n 'CI/CD Test'. D·ª´ng ƒë·ªÉ tr√°nh mang l·ªói l√™n prod."
fi

# ===== PR & Merge =====
if have gh; then
  say "üîó T·∫°o/m·ªü PR"
  if gh pr view "$BR" --head "$BR" >/dev/null 2>&1; then
    PRN=$(gh pr view "$BR" --json number -q '.number')
    say "‚ÑπÔ∏è ƒê√£ c√≥ PR #$PRN"
  else
    gh pr create --base "$BASE" --head "$BR" \
      --title "fix(html): remove stray CI/CD Test tail from all HTML" \
      --body "- Remove leftover debug line after </html> across all served variants\n- QA: grep live & multiple endpoints" || die "T·∫°o PR th·∫•t b·∫°i"
    PRN=$(gh pr view "$BR" --json number -q '.number')
  fi
  say "ü§ñ B·∫≠t auto-merge (squash) khi CI PASS"
  gh pr merge "$BR" --squash --auto || warn "Kh√¥ng b·∫≠t auto-merge ƒë∆∞·ª£c (ch·ªù CI ho·∫∑c thi·∫øu quy·ªÅn)."

  say "‚è≥ Ch·ªù PR merge (t·ªëi ƒëa ~8 ph√∫t, ki·ªÉm tra m·ªói 15s)"
  for i in {1..32}; do
    MSTATE=$(gh pr view "$PRN" --json state -q '.state' || echo "UNKNOWN")
    [[ "$MSTATE" == "MERGED" ]] && { say "‚úÖ PR ƒë√£ merge"; break; }
    sleep 15
  done
  [[ "${MSTATE:-}" == "MERGED" ]] || die "‚ùå PR ch∆∞a merge. H√£y ki·ªÉm tra CI/permissions."
else
  warn "‚ö†Ô∏è gh CLI ch∆∞a c·∫•u h√¨nh ‚Üí h√£y merge PR th·ªß c√¥ng r·ªìi ch·∫°y l·∫°i ph·∫ßn VERIFY b√™n d∆∞·ªõi."
fi

# ===== Trigger deploy theo n·ªÅn t·∫£ng ph·ªï bi·∫øn (best-effort) =====
say "üöÄ Trigger deploy (best-effort)"
# GitHub Pages: gi·∫£ ƒë·ªãnh workflow pages
if have gh && gh workflow list --limit 200 | grep -qi "pages"; then
  gh workflow run "$(gh workflow list --limit 200 | awk 'NR==1{print $1}')" || true
fi
# Vercel / Netlify: n·∫øu c√≥ CLI & token th√¨ c√≥ th·ªÉ th√™m l·ªánh t∆∞∆°ng ·ª©ng.

# ===== Purge CDN (Cloudflare n·∫øu c√≥ token & zone) =====
if [[ -n "${CF_API_TOKEN:-}" && -n "${CF_ZONE_ID:-}" ]]; then
  say "üßº Purge Cloudflare cache"
  curl -fsS -X POST "https://api.cloudflare.com/client/v4/zones/${CF_ZONE_ID}/purge_cache" \
    -H "Authorization: Bearer ${CF_API_TOKEN}" \
    -H "Content-Type: application/json" \
    --data '{"purge_everything":true}' >/dev/null && say "‚úÖ Purged"
else
  warn "‚ÑπÔ∏è B·ªè qua purge Cloudflare (kh√¥ng c√≥ CF_API_TOKEN/CF_ZONE_ID)."
fi

# ===== VERIFY live (kh√¥ng ph·ª• thu·ªôc cache tr√¨nh duy·ªát) =====
say "üß™ Verify live endpoints (grep kh√¥ng ƒë∆∞·ª£c tr·∫£ v·ªÅ g√¨)"
fail=0
check(){
  local url="$1"
  if curl -fsS "$url" | grep -n "CI/CD Test" ; then
    printf "‚ùå STILL FOUND in %s\n" "$url"
    fail=1
  else
    printf "‚úÖ Clean: %s\n" "$url"
  fi
}
sleep 10  # ƒë·ªám nh·ªè sau deploy/purge
check "$SITE_ORIGIN/"
check "$SITE_ORIGIN/index.html"
check "$SITE_ORIGIN/pages/index.html"
check "$SITE_ORIGIN/pages/deals.html"
check "$SITE_ORIGIN/pages/blog.html"

# ===== K·∫øt lu·∫≠n =====
if [[ $fail -eq 0 ]]; then
  say "üéâ LIVE CLEAN ‚Äî kh√¥ng c√≤n 'CI/CD Test' ·ªü production."
  cat > POST_DEPLOY_VERIFY.md <<MD
# ‚úÖ Post-deploy verify ‚Äî hotfix CI/CD line
- [x] Root: /
- [x] /index.html
- [x] /pages/index.html
- [x] /pages/deals.html
- [x] /pages/blog.html
All endpoints are clean (no 'CI/CD Test'). CDN purged: ${CF_ZONE_ID:+yes}${CF_ZONE_ID:-no}.
MD
else
  die "‚ùå V·∫´n c√≤n ƒëi·ªÉm ch∆∞a s·∫°ch. H√£y ki·ªÉm tra ƒë∆∞·ªùng d·∫´n deploy th·ª±c t·∫ø (build/dist) ho·∫∑c CDN layer."
fi