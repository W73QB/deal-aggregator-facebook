// GENERATED BY GEMINI
const axios = require('axios');
const fs = require('fs');
const FormData = require('form-data');

class FacebookAPI {
  /**
   * Facebook API client
   * @param {string} pageId - Facebook page ID
   * @param {string} accessToken - Facebook page access token
   * @param {Object} options - Configuration options
   * @param {number} options.timeoutMs - Request timeout in milliseconds
   * @param {string} options.apiVersion - Graph API version
   */
  constructor(pageId, accessToken, options = {}) {
    if (!pageId || !accessToken) {
      throw new Error('Page ID and Access Token are required.');
    }
    this.pageId = pageId;
    this.accessToken = accessToken;
    this.apiVersion = options.apiVersion || 'v19.0';
    this.api = axios.create({
      baseURL: `https://graph.facebook.com/${this.apiVersion}`,
      timeout: options.timeoutMs || 30000,
      headers: {
        'User-Agent': 'DealAggregator/1.1'
      }
    });
  }

  /**
   * Post a message to Facebook page
   * @param {Object} params - Post parameters
   * @param {string} params.message - Message content
   * @param {string} params.link - Optional link to include
   * @returns {Promise<Object>} Post result with success status and post ID
   */
  async postMessage({ message, link = null }) {
    try {
      const params = {
        message,
        access_token: this.accessToken
      };
      if (link) {
        params.link = link;
      }
      
      const response = await this.api.post(`/${this.pageId}/feed`, params);
      
      return {
        success: true,
        postId: response.data.id,
        message: 'Post created successfully'
      };
    } catch (error) {
      return {
        success: false,
        error: error.response?.data || { message: error.message },
        message: 'Failed to create post'
      };
    }
  }

  /**
   * Post a photo to Facebook page
   * @param {Object} params - Post parameters
   * @param {string} params.photoPath - Local path to the photo
   * @param {string} params.caption - The caption for the photo
   * @returns {Promise<Object>} Post result with success status and post ID
   */
  async postPhoto({ photoPath, caption }) {
    if (!fs.existsSync(photoPath)) {
      return { success: false, message: `Photo not found at path: ${photoPath}` };
    }
    
    try {
      const form = new FormData();
      form.append('caption', caption);
      form.append('source', fs.createReadStream(photoPath));
      form.append('access_token', this.accessToken);

      const response = await this.api.post(`/${this.pageId}/photos`, form, {
        headers: form.getHeaders()
      });

      return {
        success: true,
        postId: response.data.id,
        post_id: response.data.post_id, // Note: photo upload returns id and post_id
        message: 'Photo posted successfully'
      };
    } catch (error) {
      return {
        success: false,
        error: error.response?.data || { message: error.message },
        message: 'Failed to post photo'
      };
    }
  }

  /**
   * Post a video to Facebook page
   * @param {Object} params - Post parameters
   * @param {string} params.videoPath - Local path to the video
   * @param {string} params.description - The description for the video
   * @returns {Promise<Object>} Post result with success status and video ID
   */
  async postVideo({ videoPath, description }) {
    if (!fs.existsSync(videoPath)) {
      return { success: false, message: `Video not found at path: ${videoPath}` };
    }

    try {
      const form = new FormData();
      form.append('description', description);
      form.append('source', fs.createReadStream(videoPath));
      form.append('access_token', this.accessToken);

      const response = await this.api.post(`/${this.pageId}/videos`, form, {
        headers: form.getHeaders(),
        maxContentLength: Infinity,
        maxBodyLength: Infinity
      });

      return {
        success: true,
        videoId: response.data.id,
        message: 'Video posted successfully. It will be processed by Facebook.'
      };
    } catch (error) {
      return {
        success: false,
        error: error.response?.data || { message: error.message },
        message: 'Failed to post video'
      };
    }
  }
  
  /**
   * Validate Facebook credentials by checking page access
   * @returns {Promise<Object>} Validation result with success status and data
   */
  async validateCredentials() {
    try {
      const response = await this.api.get('/me', {
        params: {
          fields: 'id,name',
          access_token: this.accessToken
        }
      });

      const isCorrectPage = response.data.id === this.pageId;
      return {
        success: isCorrectPage,
        pageId: response.data.id,
        pageName: response.data.name,
        message: isCorrectPage ? 'Token valid for specified page' : 'Token valid but for different page'
      };
    } catch (error) {
      return {
        success: false,
        error: error.response?.data || { message: error.message },
        message: 'Token validation failed'
      };
    }
  }

  /**
   * Test Facebook API access and credentials
   * @returns {Promise<Object>} Test result with detailed status
   */
  async testAccess() {
    console.log('üîç Testing Facebook API Access...\n');
    
    const credentialTest = await this.validateCredentials();
    console.log(`‚úÖ Credential Test: ${credentialTest.success ? 'PASS' : 'FAIL'}`);
    if (credentialTest.success) {
      console.log(`   Page: ${credentialTest.pageName} (${credentialTest.pageId})`);
    } else {
      console.log(`   Error: ${credentialTest.message}`);
      if (credentialTest.error) console.log(`   Details: ${JSON.stringify(credentialTest.error)}`);
    }
    
    try {
      const response = await this.api.get('/me/permissions', {
        params: { access_token: this.accessToken }
      });
      
      const requiredPerms = ['pages_manage_posts', 'pages_read_engagement'];
      const grantedPerms = response.data.data?.filter(p => p.status === 'granted').map(p => p.permission) || [];
      const missingPerms = requiredPerms.filter(p => !grantedPerms.includes(p));

      const permsTest = missingPerms.length === 0;
      console.log(`‚úÖ Permission Test: ${permsTest ? 'PASS' : 'FAIL'}`);
      if (!permsTest) {
        console.log(`   Missing: ${missingPerms.join(', ')}`);
      } else {
        console.log(`   Granted: ${requiredPerms.join(', ')}`);
      }
      
      return {
        credentials: credentialTest.success,
        permissions: permsTest,
        overall: credentialTest.success && permsTest
      };
    } catch (error) {
      console.log(`‚ùå Permission Test: FAIL`);
      console.log(`   Error: ${error.response?.data?.error?.message || error.message}`);
      return {
        credentials: credentialTest.success,
        permissions: false,
        overall: false,
        error: error.response?.data || { message: error.message }
      };
    }
  }
}

module.exports = {
  FacebookAPI
};
